// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.12
// source: pkg/distance/proto/distance.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// DistanceClient is the client API for Distance service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type DistanceClient interface {
	// Sends a distance value in meters
	FindDistance(ctx context.Context, in *DistanceRequest, opts ...grpc.CallOption) (*DistanceResponse, error)
	// Sends an address and returns a map position geometry
	FindGeometry(ctx context.Context, in *AddressRequest, opts ...grpc.CallOption) (*MapPosition, error)
}

type distanceClient struct {
	cc grpc.ClientConnInterface
}

func NewDistanceClient(cc grpc.ClientConnInterface) DistanceClient {
	return &distanceClient{cc}
}

func (c *distanceClient) FindDistance(ctx context.Context, in *DistanceRequest, opts ...grpc.CallOption) (*DistanceResponse, error) {
	out := new(DistanceResponse)
	err := c.cc.Invoke(ctx, "/distance.Distance/FindDistance", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *distanceClient) FindGeometry(ctx context.Context, in *AddressRequest, opts ...grpc.CallOption) (*MapPosition, error) {
	out := new(MapPosition)
	err := c.cc.Invoke(ctx, "/distance.Distance/FindGeometry", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DistanceServer is the server API for Distance service.
// All implementations must embed UnimplementedDistanceServer
// for forward compatibility
type DistanceServer interface {
	// Sends a distance value in meters
	FindDistance(context.Context, *DistanceRequest) (*DistanceResponse, error)
	// Sends an address and returns a map position geometry
	FindGeometry(context.Context, *AddressRequest) (*MapPosition, error)
	mustEmbedUnimplementedDistanceServer()
}

// UnimplementedDistanceServer must be embedded to have forward compatible implementations.
type UnimplementedDistanceServer struct {
}

func (UnimplementedDistanceServer) FindDistance(context.Context, *DistanceRequest) (*DistanceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindDistance not implemented")
}
func (UnimplementedDistanceServer) FindGeometry(context.Context, *AddressRequest) (*MapPosition, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindGeometry not implemented")
}
func (UnimplementedDistanceServer) mustEmbedUnimplementedDistanceServer() {}

// UnsafeDistanceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to DistanceServer will
// result in compilation errors.
type UnsafeDistanceServer interface {
	mustEmbedUnimplementedDistanceServer()
}

func RegisterDistanceServer(s grpc.ServiceRegistrar, srv DistanceServer) {
	s.RegisterService(&Distance_ServiceDesc, srv)
}

func _Distance_FindDistance_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DistanceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DistanceServer).FindDistance(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/distance.Distance/FindDistance",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DistanceServer).FindDistance(ctx, req.(*DistanceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Distance_FindGeometry_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddressRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DistanceServer).FindGeometry(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/distance.Distance/FindGeometry",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DistanceServer).FindGeometry(ctx, req.(*AddressRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Distance_ServiceDesc is the grpc.ServiceDesc for Distance service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Distance_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "distance.Distance",
	HandlerType: (*DistanceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "FindDistance",
			Handler:    _Distance_FindDistance_Handler,
		},
		{
			MethodName: "FindGeometry",
			Handler:    _Distance_FindGeometry_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "pkg/distance/proto/distance.proto",
}
